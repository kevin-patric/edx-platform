"""
Entrance Exams view module -- handles all requests related to entrance exam management via Studio
Intended to be utilized as an AJAX callback handler, versus a proper view/screen
"""
import json
from uuid import uuid4

from django.conf import settings
from django.contrib.auth.decorators import login_required
from django_future.csrf import ensure_csrf_cookie
from django.http import HttpResponse
from django.test import RequestFactory

from contentstore.views.item import create_item, delete_item
from milestones import api as milestones_api
from models.settings.course_metadata import CourseMetadata
from opaque_keys.edx.keys import CourseKey
from student.auth import has_course_author_access
from xmodule.modulestore.django import modulestore

__all__ = ['entrance_exam', 'entrance_exam_create_helper' ]


@login_required
@ensure_csrf_cookie
def entrance_exam(request, course_key_string):
    """
    The restful handler for entrance exams.
    It allows retrieval of all the assets (as an HTML page), as well as uploading new assets,
    deleting assets, and changing the "locked" state of an asset.

    GET
        Retrieves the entrance exam module (metadata) for the specified course
    POST
        Adds an entrance exam module to the specified course.
    DELETE
        Removes the entrance exam from the course
    """
    course_key = CourseKey.from_string(course_key_string)

    # Deny access if the feature is not enabled
    if not settings.FEATURES.get('ENTRANCE_EXAMS', False):
        return HttpResponse(status=400)

    # Deny access if the user is valid, but they lack the proper object access privileges
    if not has_course_author_access(request.user, course_key):
        return HttpResponse(status=403)

    # Retrieve the entrance exam module for the specified course (returns 404 if none found)
    if request.method == 'GET':
        return _get_entrance_exam(request, course_key)

    # Create a new entrance exam for the specified course (returns 201 if created)
    elif request.method == 'POST':
        response_format = request.REQUEST.get('format', 'html')
        http_accept = request.META.get('http_accept')
        if response_format == 'json' or 'application/json' in http_accept:
            # First clean out any old entrance exams
            _delete_entrance_exam(request, course_key)
            return _create_entrance_exam(request, course_key)
        return HttpResponse(status=400)

    # Remove the entrance exam module for the specified course (returns 204 regardless of existence)
    elif request.method == 'DELETE':
        return _delete_entrance_exam(request, course_key)

    # No other HTTP verbs/methods are supported at this time
    else:
        return HttpResponse(status=405)


@login_required
@ensure_csrf_cookie
def entrance_exam_create_helper(request, course_key_string):
    """
    Secret helper to create entrance exams via GET for the POST-challenged...
    Really just a development/demo crutch :)
    """
    course_key = CourseKey.from_string(course_key_string)
    return _create_entrance_exam(request, course_key)


def _create_entrance_exam(request, course_key):
    """
    Internal workflow operation to create an entrance exam
    """

    # Confirm the course exists
    course = modulestore().get_course(course_key)
    if course is None:
        return HttpResponse(status=400)

    # Create the entrance exam item (currently it's just a chapter)
    payload = {
        'category': "chapter",
        'display_name': "Entrance Exam",
        'parent_locator': unicode(course.location),
        'is_entrance_exam': True,
    }
    factory = RequestFactory()
    internal_request = factory.post('/', json.dumps(payload), content_type="application/json")
    internal_request.user = request.user
    created_item = json.loads(create_item(internal_request).content)

    # Set the 'entrance_exam_enabled' and 'entrance_exam_minimum_score_pct' flags on the course
    # Reload the course so we don't overwrite the new child reference
    entrance_exam_minimum_score_pct = request.POST.get('entrance_exam_minimum_score_pct', 1) / 100
    course = modulestore().get_course(course_key)
    metadata_json = {
        "entrance_exam_enabled": {"value": "True"},
        "entrance_exam_minimum_score_pct": {"value": entrance_exam_minimum_score_pct},
    }
    CourseMetadata.update_from_json(course, metadata_json, request.user)

    # Add an entrance exam milestone if one does not already exist
    namespace = '{}.entrance_exams'.format(unicode(course_key))
    milestones = milestones_api.get_milestones(namespace)
    if len(milestones):
        milestone = milestones[0]
    else:
        milestone = milestones_api.add_milestone({
            'name': 'Completed Entrance Exam'.format(uuid4()),
            'namespace': '{}.entrance_exams'.format(unicode(course_key)),
            'description': 'Autogenerated during {} entrance exam creation workflow.'.format(
                unicode(course.id)
            ),
        })
    milestones_api.add_course_milestone(
        unicode(course.id),
        'requires',
        milestone
    )
    milestones_api.add_course_content_milestone(
        unicode(course.id),
        created_item['locator'],
        'fulfills',
        milestone
    )

    return HttpResponse(status=201)


def _get_entrance_exam(request, course_key):  # pylint: disable=W0613
    """
    Internal workflow operation to retrieve an entrance exam
    """
    course = modulestore().get_course(course_key)
    if course is None:
        return HttpResponse(status=400)

    children = modulestore().get_items(course_key, qualifiers={'metadata.is_entrance_exam': True})
    if not len(children):
        return HttpResponse(status=404)

    return HttpResponse(_serialize_entrance_exam(children[0]), status=200, mimetype='application/json')


def _delete_entrance_exam(request, course_key):
    """
    Internal workflow operation to remove an entrance exam
    """
    course = modulestore().get_course(course_key)
    if course is None:
        return HttpResponse(status=400)

    children = modulestore().get_items(course_key, qualifiers={'metadata.is_entrance_exam': True})
    for child in children:
        delete_item(request, child.location)
        milestones_api.remove_content_references(unicode(child.location))

    # Set the 'entrance_exam_enabled' flag on the course
    # Reload the course so we have the latest state
    course = modulestore().get_course(course_key)
    metadata_json = {"entrance_exam_enabled": {"value": "False"}}
    CourseMetadata.update_from_json(course, metadata_json, request.user)

    return HttpResponse(status=204)


def _serialize_entrance_exam(entrance_exam):
    return json.dumps({
        'locator': unicode(entrance_exam.location)
    })
